#!/usr/bin/php
<?php

require __DIR__ . '/../vendor/autoload.php';

use Symfony\Component\Console\Application;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Process\Process;

class CodeQualityTool extends Application
{

    const PHP_FILES_IN_SRC = '/(.*)(\.php|\.theme|\.module)$/';
    private $output;
    private $input;

    public function __construct()
    {
        parent::__construct('Code Quality Tool', '1.0.0');
    }

    public function doRun(InputInterface $input, OutputInterface $output)
    {
        $this->input = $input;
        $this->output = $output;

        $output->writeln('<fg=white;options=bold;bg=red>Code Quality Tool</fg=white;options=bold;bg=red>');
        $output->writeln('<info>Fetching files</info>');
        $files = $this->extractCommitedFiles();

//        $output->writeln('<info>Check composer</info>');
//        $this->checkComposer($files);

        $output->writeln('<info>Running PHPLint</info>');
        if (!$this->phpLint($files)) {
            throw new Exception('There are some PHP syntax errors!');
        }

        $output->writeln('<info>Checking code style</info>');
        if (!$this->codeStyle($files)) {
            throw new Exception(sprintf('There are coding standards violations!'));
        }

        $output->writeln('<info>Checking code style with PHPCBF</info>');
        if (!$this->codeStyleCbf($files)) {
            throw new Exception(sprintf('There are PHPCBF coding standards violations!'));
        }

        $output->writeln('<info>Checking code style with PHPCS</info>');
        if (!$this->codeStylePsr($files)) {
            throw new Exception(sprintf('There are PHPCS coding standards violations!'));
        }

        $output->writeln('<info>Checking code mess with PHPMD</info>');
        if (!$this->phPmd($files)) {
            throw new Exception(sprintf('There are PHPMD violations!'));
        }

        $output->writeln('<info>Running Jest tests</info>');
        if (!$this->jestTests()) {
            throw new Exception('Fix the fucking Jest tests!');
        }

        $output->writeln('<info>Good job dude!</info>');
    }

    private function extractCommitedFiles()
    {
        $output = [];
        $rc = 0;

        exec('git rev-parse --verify HEAD 2> /dev/null', $output, $rc);

        $against = '4b825dc642cb6eb9a060e54bf8d69288fbee4904';
        if ($rc == 0) {
            $against = 'HEAD';
        }

        exec("git diff-index --cached --name-status $against | egrep '^(A|M)' | awk '{print $2;}'", $output);

        return $output;
    }

    private function checkComposer($files)
    {
        $composerJsonDetected = false;
        $composerLockDetected = false;

        foreach ($files as $file) {
            if ($file === 'composer.json') {
                $composerJsonDetected = true;
            }

            if ($file === 'composer.lock') {
                $composerLockDetected = true;
            }
        }

        if ($composerJsonDetected && !$composerLockDetected) {
            throw new Exception('composer.lock must be commited if composer.json is modified!');
        }
    }

    private function phpLint($files)
    {
        $needle = '/(\.php)|(\.inc)$/';
        $succeed = true;

        foreach ($files as $file) {

            if ($this->checkFileIsExclude($file)) {
                continue;
            }

            if (!preg_match($needle, $file)) {
                continue;
            }

            $process = new Process(['php', '-l', $file]);
            $process->run();

            if (!$process->isSuccessful()) {

                $this->output->writeln($file);
                $this->output->writeln(sprintf('<error>%s</error>', trim($process->getErrorOutput())));

                if ($succeed) {
                    $succeed = false;
                }
            }
        }

        return $succeed;
    }

    private function checkFileIsExclude($file)
    {
        if (preg_match('/vendor/', $file)) {
            return true;
        } elseif (preg_match('/app/', $file)) {
            return true;
        } elseif (preg_match('/routes/', $file)) {
            return true;
        } elseif (preg_match('/storage/', $file)) {
            return true;
        } elseif (preg_match('/database/', $file)) {
            return true;
        } else {
            return false;
        }
    }

    private function codeStyle(array $files)
    {
        $succeed = true;

        foreach ($files as $file) {
            $srcFile = preg_match(self::PHP_FILES_IN_SRC, $file);

            if (!$srcFile) {
                continue;
            }

            if ($this->checkFileIsExclude($file)) {
                continue;
            }

            $phpCsFixer = new Process(
                [
                    'php',
                    'vendor/bin/php-cs-fixer',
                    'fix',
                    '--dry-run',
                    '--verbose',
                    $file,
                ]
            );

            $phpCsFixer->setWorkingDirectory(__DIR__ . '/../');
            $phpCsFixer->run();

            if (!$phpCsFixer->isSuccessful()) {
                $this->output->writeln(sprintf('<error>%s</error>', trim($phpCsFixer->getOutput())));

                if ($succeed) {
                    $succeed = false;
                }
            }
        }

        return $succeed;
    }

    private function codeStyleCbf(array $files)
    {
        $succeed = true;
        $needle = self::PHP_FILES_IN_SRC;

        foreach ($files as $file) {

            if ($this->checkFileIsExclude($file)) {
                continue;
            }

            if (!preg_match($needle, $file)) {
                continue;
            }

            $phpCsFixer = new Process(
                [
                    'php',
                    'vendor/bin/phpcbf',
                    $file,
                    '--ignore=/vendor/*',
                    '--standard=phpcs.xml',
                    '--encoding=utf-8 -n -p',
                ]
            );
            $phpCsFixer->setWorkingDirectory(__DIR__ . '/../');
            $phpCsFixer->run();

            if (!$phpCsFixer->isSuccessful()) {
                $this->output->writeln(sprintf('<error>%s</error>', trim($phpCsFixer->getOutput())));

                if ($succeed) {
                    $succeed = false;
                }
            }
        }

        return $succeed;
    }

    private function codeStylePsr(array $files)
    {
        $succeed = true;
        $needle = self::PHP_FILES_IN_SRC;

        foreach ($files as $file) {

            if ($this->checkFileIsExclude($file)) {
                continue;
            }

            if (!preg_match($needle, $file)) {
                continue;
            }

            $phpCsFixer = new Process(
                [
                    'php',
                    'vendor/bin/phpcs',
                    $file,
                    '--ignore=/var/SymfonyRequirements.php,/vendor/*',
                    '--standard=phpcs.xml',
                    '--encoding=utf-8 -n -p',
                ]
            );
            $phpCsFixer->setWorkingDirectory(__DIR__ . '/../');
            $phpCsFixer->run();

            if (!$phpCsFixer->isSuccessful()) {
                $this->output->writeln(sprintf('<error>%s</error>', trim($phpCsFixer->getOutput())));

                if ($succeed) {
                    $succeed = false;
                }
            }
        }

        return $succeed;
    }

    private function phPmd($files)
    {
        $needle = self::PHP_FILES_IN_SRC;
        $succeed = true;

        foreach ($files as $file) {

            if ($this->checkFileIsExclude($file)) {
                continue;
            }

            if (!preg_match($needle, $file)) {
                continue;
            }
            $process = new Process(
                [
                    'php',
                    'vendor/bin/phpmd',
                    $file,
                    'text',
                    'phpmd-ruleset.xml',
                ]
            );
            $process->setWorkingDirectory(__DIR__ . '/../');
            $process->run();


            if (!$process->isSuccessful()) {
                $this->output->writeln($file);
                $this->output->writeln(sprintf('<error>%s</error>', trim($process->getErrorOutput())));
                $this->output->writeln(sprintf('<info>%s</info>', trim($process->getOutput())));
                if ($succeed) {
                    $succeed = false;
                }
            }
        }

        return $succeed;
    }

    private function jestTests()
    {
        $jest = new Process(['yarn', 'test']);
        $jest->setWorkingDirectory(__DIR__ . '/../');
        $jest->setTimeout(5200);

        $jest->run(
            function ($type, $buffer) {
                $this->output->write($buffer);
            }
        );

        return $jest->isSuccessful();
    }

    private function esLint($files)
    {
        $needle = '/app\/Resources\/(.*)(\.js)$/';

        $esLintFiles = array_filter(
            $files,
            function ($file) use ($needle) {
                return preg_match($needle, $file);
            }
        );

        $eSLint = new Process(
            array_merge(
                [
                    './node_modules/.bin/eslint',
                    '-c',
                    '.eslintrc.yml',
                ],
                $esLintFiles
            )
        );
        $eSLint->setWorkingDirectory(__DIR__ . '/../');
        $eSLint->run();

        if (!$eSLint->isSuccessful()) {
            $this->output->write($eSLint->getOutput());
        }

        return $eSLint->isSuccessful();
    }

    private function styleLint($files)
    {
        $needle = '/app\/Resources\/(.*)(\.scss)$/';

        $styleLintFiles = array_filter(
            $files,
            function ($file) use ($needle) {
                return preg_match($needle, $file);
            }
        );

        $styleLint = new Process(
            array_merge(
                [
                    './node_modules/.bin/stylelint',
                    '-c',
                    '.stylelintrc.json',
                    '--syntax',
                    'scss',
                ],
                $styleLintFiles
            )
        );
        $styleLint->setWorkingDirectory(__DIR__ . '/../');
        $styleLint->run();

        if (!$styleLint->isSuccessful()) {
            $this->output->write($styleLint->getOutput());
        }

        return $styleLint->isSuccessful();
    }
}

$console = new CodeQualityTool();
$console->run();
